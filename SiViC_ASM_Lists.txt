<0
# Condition code groups
#-------------------------------------------------------------------------------
# first group (0) must contain all implemented condition codes
0,       1, 2,   3, 4, 5, 6, 7,        8,  9,     10, 11, 12, 13, 14,    15,    16,    17,    18,    19
C/B/NAE, P, Z/E, S, O, D, I, NC/NB/AE, NP, NZ/NE, NS, NO, ND, NI, BE/NA, NBE/A, L/NGE, NL/GE, LE/NG, NLE/G
#-------------------------------------------------------------------------------
# second group (1) contains only codes for individual flags
0, 1, 2, 3, 4, 5, 6
C, P, Z, S, O, D, I
#-------------------------------------------------------------------------------
>

<1
# Prefixes
#=============================================================================
#           name           |     mnemonics, aliases    |         code
#=============================================================================
  Repeat prefixes          |  PFXR                     |  0xE0
#-----------------------------------------------------------------------------
  Repeat instruction       |  REP                      |  0xE1
#-----------------------------------------------------------------------------
  Repeat instruction       |  REPZ, REPE               |  0xE2
#-----------------------------------------------------------------------------
  Repeat instruction       |  REPNZ, REPNE             |  0xE3
#-----------------------------------------------------------------------------
>

<2
# General purpose registers
#
# table of implicit registers (index above 63):
#=======================================================
#      name, aliases       |    index     |    type
#=======================================================
  IP                       |  255         |  3
#-------------------------------------------------------
  FLAGS                    |  254         |  3
#-------------------------------------------------------
  CNTR                     |  253         |  3
#-------------------------------------------------------
  CR                       |  252         |  3
#-------------------------------------------------------
#
# table of named registers:
#=======================================================
#      name, aliases       |    index     |    type
#=======================================================
  SLL, SLB                 |  61          |  0
#-------------------------------------------------------
  SLH                      |  61          |  1
#-------------------------------------------------------
  SLW                      |  61          |  2
#-------------------------------------------------------
  SL, SLN                  |  61          |  3
#-------------------------------------------------------
  SBL, SBB                 |  62          |  0
#-------------------------------------------------------
  SBH                      |  62          |  1
#-------------------------------------------------------
  SBW                      |  62          |  2
#-------------------------------------------------------
  SB, SBN                  |  62          |  3
#-------------------------------------------------------
  SPL, SPB                 |  63          |  0
#-------------------------------------------------------
  SPH                      |  63          |  1
#-------------------------------------------------------
  SPW                      |  63          |  2
#-------------------------------------------------------
  SP, SPN                  |  63          |  3
#-------------------------------------------------------
#
# indices of implemented indexed registers:
*00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15
*16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31
*32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47
*48,49,50,51,52,53,54,55,56,57,58,59,60
# table of indexed registers (% is replaced with index):
#=======================================================
#      name, aliases       |    index     |    type
#=======================================================
  R%L, R%B                 |  %           |  0
#-------------------------------------------------------
  R%H                      |  %           |  1
#-------------------------------------------------------
  R%W                      |  %           |  2
#-------------------------------------------------------
  R%, R%N                  |  %           |  3
>

<3
# System instructions
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Halt                     |  HALT, STOP               |  0x00                  |  -           |  -
#------------------------------------------------------------------------------------------------------------------------------
  Release                  |  RELEASE                  |  0x01                  |  -           |  -
#------------------------------------------------------------------------------------------------------------------------------
  Wait for interrupt       |  WAIT                     |  0x02                  |  -           |  -
#------------------------------------------------------------------------------------------------------------------------------
  Synchronize              |  SYNC                     |  0x03                  |  -           |  -
#------------------------------------------------------------------------------------------------------------------------------
  No operation             |  NOP                      |  0x04                  |  -           |  -
#------------------------------------------------------------------------------------------------------------------------------
  Invalid instruction      |  INVINS                   |  0x05                  |  -           |  -
#------------------------------------------------------------------------------------------------------------------------------
  Call interrupt           |  INTCALL, ICALL, INT      |  0x06                  |  -           |  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Return from interrupt    |  INTRET, IRET             |  0x07                  |  -           |  -
#------------------------------------------------------------------------------------------------------------------------------
  Call overflow interrupt  |  INTCALLO, ICALLO, INTO   |  0x08                  |  -           |  -
#------------------------------------------------------------------------------------------------------------------------------
  Call trap interrupt      |  INTCALLT, ICALLT, INTT   |  0x09                  |  -           |  -
#------------------------------------------------------------------------------------------------------------------------------
  Get interrupt handler    |  INTGET, IGET             |  0x0A                  |  -           |  REG16, IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Get interrupt handler    |  INTGET, IGET             |  0x0B                  |  -           |  REG16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  Set interrupt handler    |  INTSET, ISET             |  0x0C                  |  -           |  IMM8,  IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Set interrupt handler    |  INTSET, ISET             |  0x0D                  |  -           |  IMM8,  REG16
#------------------------------------------------------------------------------------------------------------------------------
  Clear interrupt handler  |  INTCLR, ICLR             |  0x0E                  |  -           |  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Call procedure           |  CALL                     |  0x0F                  |  -           |  REL8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Call procedure           |  !CALL                    |  0x10                  |  -           |  REL16
#------------------------------------------------------------------------------------------------------------------------------
  Call procedure           |  CALL                     |  0x11                  |  -           |  REG16
#------------------------------------------------------------------------------------------------------------------------------
  Call procedure           |  CALL                     |  0x12                  |  MEM         |  MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Return from procedure    |  RET                      |  0x13                  |  -           |  -
#------------------------------------------------------------------------------------------------------------------------------
  Return from procedure    |  RET                      |  0x14                  |  -           |  IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Push byte to stack       |  PUSH, PUSHB              |  0x15                  |  -           |  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Push word to stack       |  !PUSH, PUSHW             |  0x16                  |  -           |  IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Push byte to stack       |  PUSH, PUSHB              |  0x17                  |  -           |  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Push word to stack       |  PUSH, PUSHW              |  0x18                  |  -           |  REG16
#------------------------------------------------------------------------------------------------------------------------------
  Push byte to stack       |  PUSH, PUSHB              |  0x19                  |  MEM         |  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Push word to stack       |  PUSH, PUSHW              |  0x1A                  |  MEM         |  MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Pop byte from stack      |  POP, POPB                |  0x1B                  |  -           |  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Pop word from stack      |  POP, POPW                |  0x1C                  |  -           |  REG16
#------------------------------------------------------------------------------------------------------------------------------
  Pop byte from stack      |  POP, POPB                |  0x1D                  |  MEM         |  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Pop word from stack      |  POP, POPW                |  0x1E                  |  MEM         |  MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Push FLAGS to stack      |  PUSHF                    |  0x1F                  |  -           |  -
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Pop FLAGS from stack     |  POPF                     |  0x20                  |  -           |  -
#------------------------------------------------------------------------------------------------------------------------------
  Push all GPR to stack    |  PUSHA                    |  0x21                  |  -           |  -
#------------------------------------------------------------------------------------------------------------------------------
  Pop all GPR from stack   |  POPA                     |  0x22                  |  -           |  -
#------------------------------------------------------------------------------------------------------------------------------
  Get system info          |  INFO                     |  0x23                  |  -           |  REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Get system info          |  INFO                     |  0x24                  |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Set bit in FLAGS         |  ST%                      |  0x25                  |  CC1         |  -
#------------------------------------------------------------------------------------------------------------------------------
  Clear bit in FLAGS       |  CL%                      |  0x26                  |  CC1         |  -
#------------------------------------------------------------------------------------------------------------------------------
  Complement bit in FLAGS  |  CM%                      |  0x27                  |  CC1         |  -
#------------------------------------------------------------------------------------------------------------------------------
  Move value from FLAGS    |  MOV, MOVFLAGS            |  0x28                  |  -           |  REG16, FLAGS
#------------------------------------------------------------------------------------------------------------------------------
  Move value to FLAGS      |  MOV, MOVFLAGS            |  0x29                  |  -           |  FLAGS, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Move value from CNTR     |  MOV, MOVCNTR             |  0x2A                  |  -           |  REG16, CNTR
#------------------------------------------------------------------------------------------------------------------------------
  Move value from CNTR     |  MOV, MOVCNTR             |  0x2B                  |  MEM         |  MEM16, CNTR
#------------------------------------------------------------------------------------------------------------------------------
  Move value to CNTR       |  MOV, MOVCNTR             |  0x2C                  |  -           |  CNTR,  IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Move value to CNTR       |  MOV, MOVCNTR             |  0x2D                  |  -           |  CNTR,  REG16
#------------------------------------------------------------------------------------------------------------------------------
  Move value to CNTR       |  MOV, MOVCNTR             |  0x2E                  |  MEM         |  CNTR,  MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Move value from CR       |  MOV, MOVCR               |  0x2F                  |  -           |  REG16, CR
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Move value to CR         |  MOV, MOVCR               |  0x30                  |  -           |  CR,    REG16
#------------------------------------------------------------------------------------------------------------------------------
  Load byte                |  LOAD, LOADB              |  0x31                  |  MEM         |  REG8,  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Load word                |  LOAD, LOADW              |  0x32                  |  MEM         |  REG16, MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Store byte               |  STORE, STOREB            |  0x33                  |  MEM         |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Store word               |  STORE, STOREW            |  0x34                  |  MEM         |  MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Input byte from port     |  IN, INB                  |  0x35                  |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Input word from port     |  IN, INW                  |  0x36                  |  -           |  REG16, IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Input byte from port     |  IN, INB                  |  0x37                  |  -           |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Input word from port     |  IN, INW                  |  0x38                  |  -           |  REG16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  Output byte to port      |  OUT, OUTB                |  0x39                  |  -           |  IMM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Output word to port      |  OUT, OUTW                |  0x3A                  |  -           |  IMM8,  REG16
#------------------------------------------------------------------------------------------------------------------------------
  Output byte to port      |  OUT, OUTB                |  0x3B                  |  -           |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Output word to port      |  OUT, OUTW                |  0x3C                  |  -           |  REG8,  REG16
#------------------------------------------------------------------------------------------------------------------------------
  Set interrupt handler    |  INTSET, ISET             |  0x3D                  |  -           |  REG8,  IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Set interrupt handler    |  INTSET, ISET             |  0x3E                  |  -           |  REG8,  REG16
#------------------------------------------------------------------------------------------------------------------------------
  Set interrupt handlers   |  INTDEF, IDEF             |  0x3F                  |  -           |  IMM16
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Set interrupt handlers   |  INTDEF, IDEF             |  0x40                  |  -           |  REG16
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
>

<3
# Revision 0000, single-byte instructions
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Load effective address   |  LEA                      |  0x50                  |  MEM         |  REG16, MEM
#------------------------------------------------------------------------------------------------------------------------------
  Load effective address   |  LEA                      |  0x51                  |  -           |  REG16, REL8
#------------------------------------------------------------------------------------------------------------------------------
  Load effective address   |  !LEA                     |  0x52                  |  -           |  REG16, REL16
#------------------------------------------------------------------------------------------------------------------------------
  Compare bytes            |  CMP, CMPB                |  0x53                  |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Compare words            |  CMP, CMPW                |  0x54                  |  -           |  REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Compare bytes            |  CMP, CMPB                |  0x55                  |  -           |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Compare words            |  CMP, CMPW                |  0x56                  |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Compare bytes            |  CMP, CMPB                |  0x57                  |  MEM         |  REG8,  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Compare words            |  CMP, CMPW                |  0x58                  |  MEM         |  REG16, MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Compare bytes            |  CMP, CMPB                |  0x59                  |  MEM         |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Compare words            |  CMP, CMPW                |  0x5A                  |  MEM         |  MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Test bytes               |  TEST, TESTB              |  0x5B                  |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Test words               |  TEST, TESTW              |  0x5C                  |  -           |  REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Test bytes               |  TEST, TESTB              |  0x5D                  |  -           |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Test words               |  TEST, TESTW              |  0x5E                  |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Test bytes               |  TEST, TESTB              |  0x5F                  |  MEM         |  REG8,  MEM8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Test words               |  TEST, TESTW              |  0x60                  |  MEM         |  REG16, MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Test bytes               |  TEST, TESTB              |  0x61                  |  MEM         |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Test words               |  TEST, TESTW              |  0x62                  |  MEM         |  MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Jump relative            |  JMP                      |  0x63                  |  -           |  REL8
#------------------------------------------------------------------------------------------------------------------------------
  Jump relative            |  !JMP                     |  0x64                  |  -           |  REL16
#------------------------------------------------------------------------------------------------------------------------------
  Jump absolute indirect   |  JMP                      |  0x65                  |  -           |  REG16
#------------------------------------------------------------------------------------------------------------------------------
  Jump absolute indirect   |  JMP                      |  0x66                  |  MEM         |  MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Jump rel. on codition    |  J%                       |  0x67                  |  CC          |  REL8
#------------------------------------------------------------------------------------------------------------------------------
  Jump rel. on codition    |  !J%                      |  0x68                  |  CC          |  REL16
#------------------------------------------------------------------------------------------------------------------------------
  Jump a.i. on codition    |  J%                       |  0x69                  |  CC          |  REG16
#------------------------------------------------------------------------------------------------------------------------------
  Jump a.i. on codition    |  J%                       |  0x6A                  |  CC, MEM     |  MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Set byte on condition    |  SET%, SETB%              |  0x6B                  |  CC          |  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Set word on condition    |  SET%, SETW%              |  0x6C                  |  CC          |  REG16
#------------------------------------------------------------------------------------------------------------------------------
  Set byte on condition    |  SET%, SETB%              |  0x6D                  |  CC, MEM     |  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Set word on condition    |  SET%, SETW%              |  0x6E                  |  CC, MEM     |  MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Move byte on condition   |  CMOV%, CMOVB%            |  0x6F                  |  CC          |  REG8,  IMM8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Move word on condition   |  CMOV%, CMOVW%            |  0x70                  |  CC          |  REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Move byte on condition   |  CMOV%, CMOVB%            |  0x71                  |  CC          |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Move word on condition   |  CMOV%, CMOVW%            |  0x72                  |  CC          |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Move byte on condition   |  CMOV%, CMOVB%            |  0x73                  |  CC, MEM     |  REG8,  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Move word on condition   |  CMOV%, CMOVW%            |  0x74                  |  CC, MEM     |  REG16, MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Move byte on condition   |  CMOV%, CMOVB%            |  0x75                  |  CC, MEM     |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Move word on condition   |  CMOV%, CMOVW%            |  0x76                  |  CC, MEM     |  MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Loop                     |  LOOP                     |  0x77                  |  -           |  REL8
#------------------------------------------------------------------------------------------------------------------------------
  Loop                     |  !LOOP                    |  0x78                  |  -           |  REL16
#------------------------------------------------------------------------------------------------------------------------------
  Loop on condition        |  LOOP%                    |  0x79                  |  CC          |  REL8
#------------------------------------------------------------------------------------------------------------------------------
  Loop on condition        |  !LOOP%                   |  0x7A                  |  CC          |  REL16
#------------------------------------------------------------------------------------------------------------------------------
  Move byte                |  MOV, MOVB                |  0x7B                  |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Move word                |  MOV, MOVW                |  0x7C                  |  -           |  REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Move byte                |  MOV, MOVB                |  0x7D                  |  -           |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Move word                |  MOV, MOVW                |  0x7E                  |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Move byte                |  MOV, MOVB                |  0x7F                  |  MEM         |  REG8,  MEM8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Move word                |  MOV, MOVW                |  0x80                  |  MEM         |  REG16, MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Move byte                |  MOV, MOVB                |  0x81                  |  MEM         |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Move word                |  MOV, MOVW                |  0x82                  |  MEM         |  MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Move and zero extend     |  MOVZX                    |  0x83                  |  -           |  REG16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  Move and zero extend     |  MOVZX                    |  0x84                  |  MEM         |  REG16, MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Move and sign extend     |  MOVSX                    |  0x85                  |  -           |  REG16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  Move and sign extend     |  MOVSX                    |  0x86                  |  MEM         |  REG16, MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Exchange bytes           |  XCHG, XCHGB              |  0x87                  |  -           |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Exchange words           |  XCHG, XCHGW              |  0x88                  |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Exchange bytes           |  XCHG, XCHGB              |  0x89                  |  MEM         |  REG8,  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Exchange words           |  XCHG, XCHGW              |  0x8A                  |  MEM         |  REG16, MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Exchange bytes           |  XCHG, XCHGB              |  0x8B                  |  MEM         |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Exchange words           |  XCHG, XCHGW              |  0x8C                  |  MEM         |  MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Sign extend byte         |  CVTSX                    |  0x8D                  |  -           |  REG16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  Sign extend byte         |  CVTSX                    |  0x8E                  |  MEM         |  REG16, MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Sign extend byte         |  CVTSX                    |  0x8F                  |  MEM         |  MEM16, REG8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
>

<3
# Revision 0000, 2-byte instructions, group 0xD0 - arithmetic operations
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Increase byte by 1       |  INC, INCB                |  0xD0\0x01             |  -           |  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Increase word by 1       |  INC, INCW                |  0xD0\0x02             |  -           |  REG16
#------------------------------------------------------------------------------------------------------------------------------
  Increase byte by 1       |  INC, INCB                |  0xD0\0x03             |  MEM         |  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Increase word by 1       |  INC, INCW                |  0xD0\0x04             |  MEM         |  MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Decrease byte by 1       |  DEC, DECB                |  0xD0\0x05             |  -           |  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Decrease word by 1       |  DEC, DECW                |  0xD0\0x06             |  -           |  REG16
#------------------------------------------------------------------------------------------------------------------------------
  Decrease byte by 1       |  DEC, DECB                |  0xD0\0x07             |  MEM         |  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Decrease word by 1       |  DEC, DECW                |  0xD0\0x08             |  MEM         |  MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Negate byte              |  NEG, NEGB                |  0xD0\0x09             |  -           |  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Negate word              |  NEG, NEGW                |  0xD0\0x0A             |  -           |  REG16
#------------------------------------------------------------------------------------------------------------------------------
  Negate byte              |  NEG, NEGB                |  0xD0\0x0B             |  MEM         |  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Negate word              |  NEG, NEGW                |  0xD0\0x0C             |  MEM         |  MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Add bytes                |  ADD, ADDB                |  0xD0\0x0D             |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Add words                |  ADD, ADDW                |  0xD0\0x0E             |  -           |  REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Add bytes                |  ADD, ADDB                |  0xD0\0x0F             |  -           |  REG8,  REG8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Add words                |  ADD, ADDW                |  0xD0\0x10             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Add bytes                |  ADD, ADDB                |  0xD0\0x11             |  MEM         |  REG8,  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Add words                |  ADD, ADDW                |  0xD0\0x12             |  MEM         |  REG16, MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Add bytes                |  ADD, ADDB                |  0xD0\0x13             |  MEM         |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Add words                |  ADD, ADDW                |  0xD0\0x14             |  MEM         |  MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Subtract bytes           |  SUB, SUBB                |  0xD0\0x15             |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Subtract words           |  SUB, SUBW                |  0xD0\0x16             |  -           |  REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Subtract bytes           |  SUB, SUBB                |  0xD0\0x17             |  -           |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Subtract words           |  SUB, SUBW                |  0xD0\0x18             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Subtract bytes           |  SUB, SUBB                |  0xD0\0x19             |  MEM         |  REG8,  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Subtract words           |  SUB, SUBW                |  0xD0\0x1A             |  MEM         |  REG16, MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Subtract bytes           |  SUB, SUBB                |  0xD0\0x1B             |  MEM         |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Subtract words           |  SUB, SUBW                |  0xD0\0x1C             |  MEM         |  MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Add bytes with carry     |  ADC, ADCB                |  0xD0\0x1D             |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Add words with carry     |  ADC, ADCW                |  0xD0\0x1E             |  -           |  REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Add bytes with carry     |  ADC, ADCB                |  0xD0\0x1F             |  -           |  REG8,  REG8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Add words with carry     |  ADC, ADCW                |  0xD0\0x20             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Add bytes with carry     |  ADC, ADCB                |  0xD0\0x21             |  MEM         |  REG8,  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Add words with carry     |  ADC, ADCW                |  0xD0\0x22             |  MEM         |  REG16, MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Add bytes with carry     |  ADC, ADCB                |  0xD0\0x23             |  MEM         |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Add words with carry     |  ADC, ADCW                |  0xD0\0x24             |  MEM         |  MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Subtract bytes w. carry  |  SBB, SBBB                |  0xD0\0x25             |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Subtract words w. carry  |  SBB, SBBW                |  0xD0\0x26             |  -           |  REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Subtract bytes w. carry  |  SBB, SBBB                |  0xD0\0x27             |  -           |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Subtract words w. carry  |  SBB, SBBW                |  0xD0\0x28             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Subtract bytes w. carry  |  SBB, SBBB                |  0xD0\0x29             |  MEM         |  REG8,  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Subtract words w. carry  |  SBB, SBBW                |  0xD0\0x2A             |  MEM         |  REG16, MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Subtract bytes w. carry  |  SBB, SBBB                |  0xD0\0x2B             |  MEM         |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Subtract words w. carry  |  SBB, SBBW                |  0xD0\0x2C             |  MEM         |  MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Multiply bytes           |  MUL, MULB                |  0xD0\0x2D             |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Multiply words           |  MUL, MULW                |  0xD0\0x2E             |  -           |  REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Multiply bytes           |  MUL, MULB                |  0xD0\0x2F             |  -           |  REG8,  REG8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Multiply words           |  MUL, MULW                |  0xD0\0x30             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Multiply bytes           |  MUL, MULB                |  0xD0\0x31             |  MEM         |  REG8,  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Multiply words           |  MUL, MULW                |  0xD0\0x32             |  MEM         |  REG16, MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Multiply bytes           |  MUL, MULB                |  0xD0\0x33             |  MEM         |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Multiply words           |  MUL, MULW                |  0xD0\0x34             |  MEM         |  MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Multiply bytes           |  MUL, MULB                |  0xD0\0x35             |  -           |  REG8,  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Multiply words           |  MUL, MULW                |  0xD0\0x36             |  -           |  REG16, REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Multiply bytes           |  MUL, MULB                |  0xD0\0x37             |  MEM         |  MEM8,  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Multiply words           |  MUL, MULW                |  0xD0\0x38             |  MEM         |  MEM16, REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Multiply bytes           |  MUL, MULB                |  0xD0\0x39             |  MEM         |  REG8,  MEM8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Multiply words           |  MUL, MULW                |  0xD0\0x3A             |  MEM         |  REG16, MEM16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Multiply bytes           |  MUL, MULB                |  0xD0\0x3B             |  -           |  REG8,  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Multiply words           |  MUL, MULW                |  0xD0\0x3C             |  -           |  REG16, REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Multiply bytes           |  MUL, MULB                |  0xD0\0x3D             |  MEM         |  REG8,  REG8,  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Multiply words           |  MUL, MULW                |  0xD0\0x3E             |  MEM         |  REG16, REG16, MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Multiply bytes           |  MUL, MULB                |  0xD0\0x3F             |  MEM         |  REG8,  MEM8,  REG8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Multiply words           |  MUL, MULW                |  0xD0\0x40             |  MEM         |  REG16, MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Multiply bytes           |  MUL, MULB                |  0xD0\0x41             |  MEM         |  MEM8,  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Multiply words           |  MUL, MULW                |  0xD0\0x42             |  MEM         |  MEM16, REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes multiply    |  IMUL, IMULB              |  0xD0\0x43             |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words multiply    |  IMUL, IMULW              |  0xD0\0x44             |  -           |  REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes multiply    |  IMUL, IMULB              |  0xD0\0x45             |  -           |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words multiply    |  IMUL, IMULW              |  0xD0\0x46             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes multiply    |  IMUL, IMULB              |  0xD0\0x47             |  MEM         |  REG8,  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words multiply    |  IMUL, IMULW              |  0xD0\0x48             |  MEM         |  REG16, MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes multiply    |  IMUL, IMULB              |  0xD0\0x49             |  MEM         |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words multiply    |  IMUL, IMULW              |  0xD0\0x4A             |  MEM         |  MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes multiply    |  IMUL, IMULB              |  0xD0\0x4B             |  -           |  REG8,  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words multiply    |  IMUL, IMULW              |  0xD0\0x4C             |  -           |  REG16, REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes multiply    |  IMUL, IMULB              |  0xD0\0x4D             |  MEM         |  MEM8,  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words multiply    |  IMUL, IMULW              |  0xD0\0x4E             |  MEM         |  MEM16, REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes multiply    |  IMUL, IMULB              |  0xD0\0x4F             |  MEM         |  REG8,  MEM8,  IMM8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Signed words multiply    |  IMUL, IMULW              |  0xD0\0x50             |  MEM         |  REG16, MEM16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes multiply    |  IMUL, IMULB              |  0xD0\0x51             |  -           |  REG8,  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words multiply    |  IMUL, IMULW              |  0xD0\0x52             |  -           |  REG16, REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes multiply    |  IMUL, IMULB              |  0xD0\0x53             |  MEM         |  REG8,  REG8,  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words multiply    |  IMUL, IMULW              |  0xD0\0x54             |  MEM         |  REG16, REG16, MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes multiply    |  IMUL, IMULB              |  0xD0\0x55             |  MEM         |  REG8,  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words multiply    |  IMUL, IMULW              |  0xD0\0x56             |  MEM         |  REG16, MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes multiply    |  IMUL, IMULB              |  0xD0\0x57             |  MEM         |  MEM8,  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words multiply    |  IMUL, IMULW              |  0xD0\0x58             |  MEM         |  MEM16, REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Bytes division           |  DIV, DIVB                |  0xD0\0x59             |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Words division           |  DIV, DIVW                |  0xD0\0x5A             |  -           |  REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Bytes division           |  DIV, DIVB                |  0xD0\0x5B             |  -           |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Words division           |  DIV, DIVW                |  0xD0\0x5C             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Bytes division           |  DIV, DIVB                |  0xD0\0x5D             |  MEM         |  REG8,  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Words division           |  DIV, DIVW                |  0xD0\0x5E             |  MEM         |  REG16, MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Bytes division           |  DIV, DIVB                |  0xD0\0x5F             |  MEM         |  MEM8,  REG8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Words division           |  DIV, DIVW                |  0xD0\0x60             |  MEM         |  MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Bytes division           |  DIV, DIVB                |  0xD0\0x61             |  -           |  REG8,  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Words division           |  DIV, DIVW                |  0xD0\0x62             |  -           |  REG16, REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Bytes division           |  DIV, DIVB                |  0xD0\0x63             |  MEM         |  MEM8,  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Words division           |  DIV, DIVW                |  0xD0\0x64             |  MEM         |  MEM16, REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Bytes division           |  DIV, DIVB                |  0xD0\0x65             |  MEM         |  REG8,  MEM8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Words division           |  DIV, DIVW                |  0xD0\0x66             |  MEM         |  REG16, MEM16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Bytes division           |  DIV, DIVB                |  0xD0\0x67             |  -           |  REG8,  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Words division           |  DIV, DIVW                |  0xD0\0x68             |  -           |  REG16, REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Bytes division           |  DIV, DIVB                |  0xD0\0x69             |  MEM         |  REG8,  REG8,  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Words division           |  DIV, DIVW                |  0xD0\0x6A             |  MEM         |  REG16, REG16, MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Bytes division           |  DIV, DIVB                |  0xD0\0x6B             |  MEM         |  REG8,  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Words division           |  DIV, DIVW                |  0xD0\0x6C             |  MEM         |  REG16, MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Bytes division           |  DIV, DIVB                |  0xD0\0x6D             |  MEM         |  MEM8,  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Words division           |  DIV, DIVW                |  0xD0\0x6E             |  MEM         |  MEM16, REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes division    |  IDIV, IDIVB              |  0xD0\0x6F             |  -           |  REG8,  IMM8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Signed words division    |  IDIV, IDIVW              |  0xD0\0x70             |  -           |  REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes division    |  IDIV, IDIVB              |  0xD0\0x71             |  -           |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words division    |  IDIV, IDIVW              |  0xD0\0x72             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes division    |  IDIV, IDIVB              |  0xD0\0x73             |  MEM         |  REG8,  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words division    |  IDIV, IDIVW              |  0xD0\0x74             |  MEM         |  REG16, MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes division    |  IDIV, IDIVB              |  0xD0\0x75             |  MEM         |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words division    |  IDIV, IDIVW              |  0xD0\0x76             |  MEM         |  MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes division    |  IDIV, IDIVB              |  0xD0\0x77             |  -           |  REG8,  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words division    |  IDIV, IDIVW              |  0xD0\0x78             |  -           |  REG16, REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes division    |  IDIV, IDIVB              |  0xD0\0x79             |  MEM         |  MEM8,  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words division    |  IDIV, IDIVW              |  0xD0\0x7A             |  MEM         |  MEM16, REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes division    |  IDIV, IDIVB              |  0xD0\0x7B             |  MEM         |  REG8,  MEM8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words division    |  IDIV, IDIVW              |  0xD0\0x7C             |  MEM         |  REG16, MEM16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes division    |  IDIV, IDIVB              |  0xD0\0x7D             |  -           |  REG8,  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words division    |  IDIV, IDIVW              |  0xD0\0x7E             |  -           |  REG16, REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes division    |  IDIV, IDIVB              |  0xD0\0x7F             |  MEM         |  REG8,  REG8,  MEM8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Signed words division    |  IDIV, IDIVW              |  0xD0\0x80             |  MEM         |  REG16, REG16, MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes division    |  IDIV, IDIVB              |  0xD0\0x81             |  MEM         |  REG8,  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words division    |  IDIV, IDIVW              |  0xD0\0x82             |  MEM         |  REG16, MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes division    |  IDIV, IDIVB              |  0xD0\0x83             |  MEM         |  MEM8,  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words division    |  IDIV, IDIVW              |  0xD0\0x84             |  MEM         |  MEM16, REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Bytes modulo             |  MOD, MODB                |  0xD0\0x85             |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Words modulo             |  MOD, MODW                |  0xD0\0x86             |  -           |  REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Bytes modulo             |  MOD, MODB                |  0xD0\0x87             |  -           |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Words modulo             |  MOD, MODW                |  0xD0\0x88             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Bytes modulo             |  MOD, MODB                |  0xD0\0x89             |  MEM         |  REG8,  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Words modulo             |  MOD, MODW                |  0xD0\0x8A             |  MEM         |  REG16, MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Bytes modulo             |  MOD, MODB                |  0xD0\0x8B             |  MEM         |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Words modulo             |  MOD, MODW                |  0xD0\0x8C             |  MEM         |  MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Bytes modulo             |  MOD, MODB                |  0xD0\0x8D             |  -           |  REG8,  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Words modulo             |  MOD, MODW                |  0xD0\0x8E             |  -           |  REG16, REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Bytes modulo             |  MOD, MODB                |  0xD0\0x8F             |  MEM         |  MEM8,  REG8,  IMM8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Words modulo             |  MOD, MODW                |  0xD0\0x90             |  MEM         |  MEM16, REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Bytes modulo             |  MOD, MODB                |  0xD0\0x91             |  MEM         |  REG8,  MEM8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Words modulo             |  MOD, MODW                |  0xD0\0x92             |  MEM         |  REG16, MEM16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Bytes modulo             |  MOD, MODB                |  0xD0\0x93             |  -           |  REG8,  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Words modulo             |  MOD, MODW                |  0xD0\0x94             |  -           |  REG16, REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Bytes modulo             |  MOD, MODB                |  0xD0\0x95             |  MEM         |  REG8,  REG8,  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Words modulo             |  MOD, MODW                |  0xD0\0x96             |  MEM         |  REG16, REG16, MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Bytes modulo             |  MOD, MODB                |  0xD0\0x97             |  MEM         |  REG8,  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Words modulo             |  MOD, MODW                |  0xD0\0x98             |  MEM         |  REG16, MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Bytes modulo             |  MOD, MODB                |  0xD0\0x99             |  MEM         |  MEM8,  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Words modulo             |  MOD, MODW                |  0xD0\0x9A             |  MEM         |  MEM16, REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes modulo      |  IMOD, IMODB              |  0xD0\0x9B             |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words modulo      |  IMOD, IMODW              |  0xD0\0x9C             |  -           |  REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes modulo      |  IMOD, IMODB              |  0xD0\0x9D             |  -           |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words modulo      |  IMOD, IMODW              |  0xD0\0x9E             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes modulo      |  IMOD, IMODB              |  0xD0\0x9F             |  MEM         |  REG8,  MEM8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Signed words modulo      |  IMOD, IMODW              |  0xD0\0xA0             |  MEM         |  REG16, MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes modulo      |  IMOD, IMODB              |  0xD0\0xA1             |  MEM         |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words modulo      |  IMOD, IMODW              |  0xD0\0xA2             |  MEM         |  MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes modulo      |  IMOD, IMODB              |  0xD0\0xA3             |  -           |  REG8,  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words modulo      |  IMOD, IMODW              |  0xD0\0xA4             |  -           |  REG16, REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes modulo      |  IMOD, IMODB              |  0xD0\0xA5             |  MEM         |  MEM8,  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words modulo      |  IMOD, IMODW              |  0xD0\0xA6             |  MEM         |  MEM16, REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes modulo      |  IMOD, IMODB              |  0xD0\0xA7             |  MEM         |  REG8,  MEM8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words modulo      |  IMOD, IMODW              |  0xD0\0xA8             |  MEM         |  REG16, MEM16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes modulo      |  IMOD, IMODB              |  0xD0\0xA9             |  -           |  REG8,  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words modulo      |  IMOD, IMODW              |  0xD0\0xAA             |  -           |  REG16, REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes modulo      |  IMOD, IMODB              |  0xD0\0xAB             |  MEM         |  REG8,  REG8,  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words modulo      |  IMOD, IMODW              |  0xD0\0xAC             |  MEM         |  REG16, REG16, MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes modulo      |  IMOD, IMODB              |  0xD0\0xAD             |  MEM         |  REG8,  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Signed words modulo      |  IMOD, IMODW              |  0xD0\0xAE             |  MEM         |  REG16, MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Signed bytes modulo      |  IMOD, IMODB              |  0xD0\0xAF             |  MEM         |  MEM8,  REG8,  REG8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Signed words modulo      |  IMOD, IMODW              |  0xD0\0xB0             |  MEM         |  MEM16, REG16, REG16
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
>

<3
# Revision 0000, 2-byte instructions, group 0xD1 - logical and bitwise operations
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Bitwise byte negation    |  NOT, NOTB                |  0xD1\0x01             |  -           |  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Bitwise word negation    |  NOT, NOTW                |  0xD1\0x02             |  -           |  REG16
#------------------------------------------------------------------------------------------------------------------------------
  Bitwise byte negation    |  NOT, NOTB                |  0xD1\0x03             |  MEM         |  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Bitwise word negation    |  NOT, NOTW                |  0xD1\0x04             |  MEM         |  MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Logical AND of bytes     |  AND, ANDB                |  0xD1\0x05             |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Logical AND of words     |  AND, ANDW                |  0xD1\0x06             |  -           |  REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Logical AND of bytes     |  AND, ANDB                |  0xD1\0x07             |  -           |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Logical AND of words     |  AND, ANDW                |  0xD1\0x08             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Logical AND of bytes     |  AND, ANDB                |  0xD1\0x09             |  MEM         |  REG8,  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Logical AND of words     |  AND, ANDW                |  0xD1\0x0A             |  MEM         |  REG16, MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Logical AND of bytes     |  AND, ANDB                |  0xD1\0x0B             |  MEM         |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Logical AND of words     |  AND, ANDW                |  0xD1\0x0C             |  MEM         |  MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Logical OR of bytes      |  OR, ORB                  |  0xD1\0x0D             |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Logical OR of words      |  OR, ORW                  |  0xD1\0x0E             |  -           |  REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Logical OR of bytes      |  OR, ORB                  |  0xD1\0x0F             |  -           |  REG8,  REG8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Logical OR of words      |  OR, ORW                  |  0xD1\0x10             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Logical OR of bytes      |  OR, ORB                  |  0xD1\0x11             |  MEM         |  REG8,  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Logical OR of words      |  OR, ORW                  |  0xD1\0x12             |  MEM         |  REG16, MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Logical OR of bytes      |  OR, ORB                  |  0xD1\0x13             |  MEM         |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Logical OR of words      |  OR, ORW                  |  0xD1\0x14             |  MEM         |  MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Logical XOR of bytes     |  XOR, XORB                |  0xD1\0x15             |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Logical XOR of words     |  XOR, XORW                |  0xD1\0x16             |  -           |  REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Logical XOR of bytes     |  XOR, XORB                |  0xD1\0x17             |  -           |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Logical XOR of words     |  XOR, XORW                |  0xD1\0x18             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Logical XOR of bytes     |  XOR, XORB                |  0xD1\0x19             |  MEM         |  REG8,  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Logical XOR of words     |  XOR, XORW                |  0xD1\0x1A             |  MEM         |  REG16, MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Logical XOR of bytes     |  XOR, XORB                |  0xD1\0x1B             |  MEM         |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Logical XOR of words     |  XOR, XORW                |  0xD1\0x1C             |  MEM         |  MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Logical byte right shift |  SHR, SHRB                |  0xD1\0x1D             |  -           |  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Logical word right shift |  SHR, SHRW                |  0xD1\0x1E             |  -           |  REG16
#------------------------------------------------------------------------------------------------------------------------------
  Logical byte right shift |  SHR, SHRB                |  0xD1\0x1F             |  MEM         |  MEM8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Logical word right shift |  SHR, SHRW                |  0xD1\0x20             |  MEM         |  MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Logical byte right shift |  SHR, SHRB                |  0xD1\0x21             |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Logical word right shift |  SHR, SHRW                |  0xD1\0x22             |  -           |  REG16, IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Logical byte right shift |  SHR, SHRB                |  0xD1\0x23             |  MEM         |  MEM8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Logical word right shift |  SHR, SHRW                |  0xD1\0x24             |  MEM         |  MEM16, IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Logical byte right shift |  SHR, SHRB                |  0xD1\0x25             |  -           |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Logical word right shift |  SHR, SHRW                |  0xD1\0x26             |  -           |  REG16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  Logical byte right shift |  SHR, SHRB                |  0xD1\0x27             |  MEM         |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Logical word right shift |  SHR, SHRW                |  0xD1\0x28             |  MEM         |  MEM16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  Arithmetic b. right sh.  |  SAR, SARB                |  0xD1\0x29             |  -           |  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Arithmetic w. right sh.  |  SAR, SARW                |  0xD1\0x2A             |  -           |  REG16
#------------------------------------------------------------------------------------------------------------------------------
  Arithmetic b. right sh.  |  SAR, SARB                |  0xD1\0x2B             |  MEM         |  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Arithmetic w. right sh.  |  SAR, SARW                |  0xD1\0x2C             |  MEM         |  MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Arithmetic b. right sh.  |  SAR, SARB                |  0xD1\0x2D             |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Arithmetic w. right sh.  |  SAR, SARW                |  0xD1\0x2E             |  -           |  REG16, IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Arithmetic b. right sh.  |  SAR, SARB                |  0xD1\0x2F             |  MEM         |  MEM8,  IMM8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Arithmetic w. right sh.  |  SAR, SARW                |  0xD1\0x30             |  MEM         |  MEM16, IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Arithmetic b. right sh.  |  SAR, SARB                |  0xD1\0x31             |  -           |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Arithmetic w. right sh.  |  SAR, SARW                |  0xD1\0x32             |  -           |  REG16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  Arithmetic b. right sh.  |  SAR, SARB                |  0xD1\0x33             |  MEM         |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Arithmetic w. right sh.  |  SAR, SARW                |  0xD1\0x34             |  MEM         |  MEM16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  Logical byte left shift  |  SHL, SHLB                |  0xD1\0x35             |  -           |  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Logical word left shift  |  SHL, SHLW                |  0xD1\0x36             |  -           |  REG16
#------------------------------------------------------------------------------------------------------------------------------
  Logical byte left shift  |  SHL, SHLB                |  0xD1\0x37             |  MEM         |  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Logical word left shift  |  SHL, SHLW                |  0xD1\0x38             |  MEM         |  MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Logical byte left shift  |  SHL, SHLB                |  0xD1\0x39             |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Logical word left shift  |  SHL, SHLW                |  0xD1\0x3A             |  -           |  REG16, IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Logical byte left shift  |  SHL, SHLB                |  0xD1\0x3B             |  MEM         |  MEM8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Logical word left shift  |  SHL, SHLW                |  0xD1\0x3C             |  MEM         |  MEM16, IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Logical byte left shift  |  SHL, SHLB                |  0xD1\0x3D             |  -           |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Logical word left shift  |  SHL, SHLW                |  0xD1\0x3E             |  -           |  REG16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  Logical byte left shift  |  SHL, SHLB                |  0xD1\0x3F             |  MEM         |  MEM8,  REG8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Logical word left shift  |  SHL, SHLW                |  0xD1\0x40             |  MEM         |  MEM16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  Arithmetic b. left shift |  SAL, SALB                |  0xD1\0x41             |  -           |  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Arithmetic w. left shift |  SAL, SALW                |  0xD1\0x42             |  -           |  REG16
#------------------------------------------------------------------------------------------------------------------------------
  Arithmetic b. left shift |  SAL, SALB                |  0xD1\0x43             |  MEM         |  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Arithmetic w. left shift |  SAL, SALW                |  0xD1\0x44             |  MEM         |  MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Arithmetic b. left shift |  SAL, SALB                |  0xD1\0x45             |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Arithmetic w. left shift |  SAL, SALW                |  0xD1\0x46             |  -           |  REG16, IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Arithmetic b. left shift |  SAL, SALB                |  0xD1\0x47             |  MEM         |  MEM8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Arithmetic w. left shift |  SAL, SALW                |  0xD1\0x48             |  MEM         |  MEM16, IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Arithmetic b. left shift |  SAL, SALB                |  0xD1\0x49             |  -           |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Arithmetic w. left shift |  SAL, SALW                |  0xD1\0x4A             |  -           |  REG16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  Arithmetic b. left shift |  SAL, SALB                |  0xD1\0x4B             |  MEM         |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Arithmetic w. left shift |  SAL, SALW                |  0xD1\0x4C             |  MEM         |  MEM16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  Rotate byte right        |  ROR, RORB                |  0xD1\0x4D             |  -           |  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Rotate word right        |  ROR, RORW                |  0xD1\0x4E             |  -           |  REG16
#------------------------------------------------------------------------------------------------------------------------------
  Rotate byte right        |  ROR, RORB                |  0xD1\0x4F             |  MEM         |  MEM8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Rotate word right        |  ROR, RORW                |  0xD1\0x50             |  MEM         |  MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Rotate byte right        |  ROR, RORB                |  0xD1\0x51             |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Rotate word right        |  ROR, RORW                |  0xD1\0x52             |  -           |  REG16, IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Rotate byte right        |  ROR, RORB                |  0xD1\0x53             |  MEM         |  MEM8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Rotate word right        |  ROR, RORW                |  0xD1\0x54             |  MEM         |  MEM16, IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Rotate byte right        |  ROR, RORB                |  0xD1\0x55             |  -           |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Rotate word right        |  ROR, RORW                |  0xD1\0x56             |  -           |  REG16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  Rotate byte right        |  ROR, RORB                |  0xD1\0x57             |  MEM         |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Rotate word right        |  ROR, RORW                |  0xD1\0x58             |  MEM         |  MEM16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  Rotate byte left         |  ROL, ROLW                |  0xD1\0x59             |  -           |  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Rotate word left         |  ROL, ROLW                |  0xD1\0x5A             |  -           |  REG16
#------------------------------------------------------------------------------------------------------------------------------
  Rotate byte left         |  ROL, ROLW                |  0xD1\0x5B             |  MEM         |  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Rotate word left         |  ROL, ROLW                |  0xD1\0x5C             |  MEM         |  MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Rotate byte left         |  ROL, ROLW                |  0xD1\0x5D             |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Rotate word left         |  ROL, ROLW                |  0xD1\0x5E             |  -           |  REG16, IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Rotate byte left         |  ROL, ROLW                |  0xD1\0x5F             |  MEM         |  MEM8,  IMM8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Rotate word left         |  ROL, ROLW                |  0xD1\0x60             |  MEM         |  MEM16, IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Rotate byte left         |  ROL, ROLW                |  0xD1\0x61             |  -           |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Rotate word left         |  ROL, ROLW                |  0xD1\0x62             |  -           |  REG16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  Rotate byte left         |  ROL, ROLW                |  0xD1\0x63             |  MEM         |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Rotate word left         |  ROL, ROLW                |  0xD1\0x64             |  MEM         |  MEM16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  R.b.r. through carry     |  RCR, RCRB                |  0xD1\0x65             |  -           |  REG8
#------------------------------------------------------------------------------------------------------------------------------
  R.w.r. through carry     |  RCR, RCRW                |  0xD1\0x66             |  -           |  REG16
#------------------------------------------------------------------------------------------------------------------------------
  R.b.r. through carry     |  RCR, RCRB                |  0xD1\0x67             |  MEM         |  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  R.w.r. through carry     |  RCR, RCRW                |  0xD1\0x68             |  MEM         |  MEM16
#------------------------------------------------------------------------------------------------------------------------------
  R.b.r. through carry     |  RCR, RCRB                |  0xD1\0x69             |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  R.w.r. through carry     |  RCR, RCRW                |  0xD1\0x6A             |  -           |  REG16, IMM8
#------------------------------------------------------------------------------------------------------------------------------
  R.b.r. through carry     |  RCR, RCRB                |  0xD1\0x6B             |  MEM         |  MEM8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  R.w.r. through carry     |  RCR, RCRW                |  0xD1\0x6C             |  MEM         |  MEM16, IMM8
#------------------------------------------------------------------------------------------------------------------------------
  R.b.r. through carry     |  RCR, RCRB                |  0xD1\0x6D             |  -           |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  R.w.r. through carry     |  RCR, RCRW                |  0xD1\0x6E             |  -           |  REG16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  R.b.r. through carry     |  RCR, RCRB                |  0xD1\0x6F             |  MEM         |  MEM8,  REG8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  R.w.r. through carry     |  RCR, RCRW                |  0xD1\0x70             |  MEM         |  MEM16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  R.b.l. through carry     |  RCL, RCLB                |  0xD1\0x71             |  -           |  REG8
#------------------------------------------------------------------------------------------------------------------------------
  R.w.l. through carry     |  RCL, RCLW                |  0xD1\0x72             |  -           |  REG16
#------------------------------------------------------------------------------------------------------------------------------
  R.b.l. through carry     |  RCL, RCLB                |  0xD1\0x73             |  MEM         |  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  R.w.l. through carry     |  RCL, RCLW                |  0xD1\0x74             |  MEM         |  MEM16
#------------------------------------------------------------------------------------------------------------------------------
  R.b.l. through carry     |  RCL, RCLB                |  0xD1\0x75             |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  R.w.l. through carry     |  RCL, RCLW                |  0xD1\0x76             |  -           |  REG16, IMM8
#------------------------------------------------------------------------------------------------------------------------------
  R.b.l. through carry     |  RCL, RCLB                |  0xD1\0x77             |  MEM         |  MEM8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  R.w.l. through carry     |  RCL, RCLW                |  0xD1\0x78             |  MEM         |  MEM16, IMM8
#------------------------------------------------------------------------------------------------------------------------------
  R.b.l. through carry     |  RCL, RCLB                |  0xD1\0x79             |  -           |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  R.w.l. through carry     |  RCL, RCLW                |  0xD1\0x7A             |  -           |  REG16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  R.b.l. through carry     |  RCL, RCLB                |  0xD1\0x7B             |  MEM         |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  R.w.l. through carry     |  RCL, RCLW                |  0xD1\0x7C             |  MEM         |  MEM16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  Byte bit test            |  BT, BTB                  |  0xD1\0x7D             |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Word bit test            |  BT, BTW                  |  0xD1\0x7E             |  -           |  REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Byte bit test            |  BT, BTB                  |  0xD1\0x7F             |  -           |  REG8,  REG8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Word bit test            |  BT, BTW                  |  0xD1\0x80             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Byte bit test            |  BT, BTB                  |  0xD1\0x81             |  MEM         |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Word bit test            |  BT, BTW                  |  0xD1\0x82             |  MEM         |  MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Byte bit test            |  BT, BTB                  |  0xD1\0x83             |  MEM         |  MEM8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Word bit test            |  BT, BTW                  |  0xD1\0x84             |  MEM         |  MEM16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Byte bit test and set    |  BTS, BTSB                |  0xD1\0x85             |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Word bit test and set    |  BTS, BTSW                |  0xD1\0x86             |  -           |  REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Byte bit test and set    |  BTS, BTSB                |  0xD1\0x87             |  -           |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Word bit test and set    |  BTS, BTSW                |  0xD1\0x88             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Byte bit test and set    |  BTS, BTSB                |  0xD1\0x89             |  MEM         |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Word bit test and set    |  BTS, BTSW                |  0xD1\0x8A             |  MEM         |  MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Byte bit test and set    |  BTS, BTSB                |  0xD1\0x8B             |  MEM         |  MEM8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Word bit test and set    |  BTS, BTSW                |  0xD1\0x8C             |  MEM         |  MEM16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Byte bit test and reset  |  BTR, BTRB                |  0xD1\0x8D             |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Word bit test and reset  |  BTR, BTRW                |  0xD1\0x8E             |  -           |  REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Byte bit test and reset  |  BTR, BTRB                |  0xD1\0x8F             |  -           |  REG8,  REG8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Word bit test and reset  |  BTR, BTRW                |  0xD1\0x90             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Byte bit test and reset  |  BTR, BTRB                |  0xD1\0x91             |  MEM         |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Word bit test and reset  |  BTR, BTRW                |  0xD1\0x92             |  MEM         |  MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Byte bit test and reset  |  BTR, BTRB                |  0xD1\0x93             |  MEM         |  MEM8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Word bit test and reset  |  BTR, BTRW                |  0xD1\0x94             |  MEM         |  MEM16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Byte b.t. and complement |  BTC, BTCB                |  0xD1\0x95             |  -           |  REG8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Word b.t. and complement |  BTC, BTCW                |  0xD1\0x96             |  -           |  REG16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Byte b.t. and complement |  BTC, BTCB                |  0xD1\0x97             |  -           |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Word b.t. and complement |  BTC, BTCW                |  0xD1\0x98             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Byte b.t. and complement |  BTC, BTCB                |  0xD1\0x99             |  MEM         |  MEM8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Word b.t. and complement |  BTC, BTCW                |  0xD1\0x9A             |  MEM         |  MEM16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Byte b.t. and complement |  BTC, BTCB                |  0xD1\0x9B             |  MEM         |  MEM8,  IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Word b.t. and complement |  BTC, BTCW                |  0xD1\0x9C             |  MEM         |  MEM16, IMM16
#------------------------------------------------------------------------------------------------------------------------------
  Byte forward bit scan    |  BSF, BSFB                |  0xD1\0x9D             |  -           |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Word forward bit scan    |  BSF, BSFW                |  0xD1\0x9E             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Byte forward bit scan    |  BSF, BSFB                |  0xD1\0x9F             |  MEM         |  REG8,  MEM8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Word forward bit scan    |  BSF, BSFW                |  0xD1\0xA0             |  MEM         |  REG16, MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Byte reverse bit scan    |  BSR, BSRB                |  0xD1\0xA1             |  -           |  REG8,  REG8
#------------------------------------------------------------------------------------------------------------------------------
  Word reverse bit scan    |  BSR, BSRW                |  0xD1\0xA2             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Byte reverse bit scan    |  BSR, BSRB                |  0xD1\0xA3             |  MEM         |  REG8,  MEM8
#------------------------------------------------------------------------------------------------------------------------------
  Word reverse bit scan    |  BSR, BSRW                |  0xD1\0xA4             |  MEM         |  REG16, MEM16
#------------------------------------------------------------------------------------------------------------------------------
  Double right shift       |  SHRD                     |  0xD1\0xA5             |  -           |  REG16, REG16, IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Double right shift       |  SHRD                     |  0xD1\0xA6             |  MEM         |  MEM16, REG16, IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Double right shift       |  SHRD                     |  0xD1\0xA7             |  MEM         |  REG16, MEM16, IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Double right shift       |  SHRD                     |  0xD1\0xA8             |  -           |  REG16, REG16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  Double right shift       |  SHRD                     |  0xD1\0xA9             |  MEM         |  MEM16, REG16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  Double right shift       |  SHRD                     |  0xD1\0xAA             |  MEM         |  REG16, MEM16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  Double left shift        |  SHLD                     |  0xD1\0xAB             |  -           |  REG16, REG16, IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Double left shift        |  SHLD                     |  0xD1\0xAC             |  MEM         |  MEM16, REG16, IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Double left shift        |  SHLD                     |  0xD1\0xAD             |  MEM         |  REG16, MEM16, IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Double left shift        |  SHLD                     |  0xD1\0xAE             |  -           |  REG16, REG16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  Double left shift        |  SHLD                     |  0xD1\0xAF             |  MEM         |  MEM16, REG16, REG8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Double left shift        |  SHLD                     |  0xD1\0xB0             |  MEM         |  REG16, MEM16, REG8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
>

<3
# Revision 0000, 2-byte instructions, group 0xD2 - string manipulation operations
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Load byte from string    |  LODSB                    |  0xD2\0x01             |  -           |  REG8,  REG16
#------------------------------------------------------------------------------------------------------------------------------
  Load word from string    |  LODSW                    |  0xD2\0x02             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Store byte to string     |  STOSB                    |  0xD2\0x03             |  -           |  REG16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  Store word to string     |  STOSW                    |  0xD2\0x04             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Move byte btwn. strings  |  MOVSB                    |  0xD2\0x05             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Move word btwn. strings  |  MOVSW                    |  0xD2\0x06             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Load string byte         |  LOADSB                   |  0xD2\0x07             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Load string word         |  LOADSW                   |  0xD2\0x08             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Store string byte        |  STORESB                  |  0xD2\0x09             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Store string word        |  STORESW                  |  0xD2\0x0A             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Compare string bytes     |  CMPSB                    |  0xD2\0x0B             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Compare string words     |  CMPSW                    |  0xD2\0x0C             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Scan string byte         |  SCASB                    |  0xD2\0x0D             |  -           |  REG8,  REG16
#------------------------------------------------------------------------------------------------------------------------------
  Scan string word         |  SCASW                    |  0xD2\0x0E             |  -           |  REG16, REG16
#------------------------------------------------------------------------------------------------------------------------------
  Input string byte        |  INSB                     |  0xD2\0x0F             |  -           |  REG16, IMM8
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
  Input string word        |  INSW                     |  0xD2\0x10             |  -           |  REG16, IMM8
#------------------------------------------------------------------------------------------------------------------------------
  Input string byte        |  INSB                     |  0xD2\0x11             |  -           |  REG16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  Input string word        |  INSW                     |  0xD2\0x12             |  -           |  REG16, REG8
#------------------------------------------------------------------------------------------------------------------------------
  Output string byte       |  OUTSB                    |  0xD2\0x13             |  -           |  IMM8,  REG16
#------------------------------------------------------------------------------------------------------------------------------
  Output string word       |  OUTSW                    |  0xD2\0x14             |  -           |  IMM8,  REG16
#------------------------------------------------------------------------------------------------------------------------------
  Output string byte       |  OUTSB                    |  0xD2\0x15             |  -           |  REG8,  REG16
#------------------------------------------------------------------------------------------------------------------------------
  Output string word       |  OUTSW                    |  0xD2\0x16             |  -           |  REG8,  REG16
#==============================================================================================================================
#           name           |     mnemonics, aliases    |         opcode         |    suffix    |           arguments
#==============================================================================================================================
>

<4
# Predefined constants for the assembler
#==============================================================================================================================
#                  identifier                  |    value    |                           description
#==============================================================================================================================
  SVC_ARCHITECTURE                             |     0x57C0  |  SiViC default architecture identifier
#------------------------------------------------------------------------------------------------------------------------------
  SVC_SZ_BYTE                                  |          1  |  size of byte
  SVC_SZ_WORD                                  |          2  |  size of word
  SVC_SZ_LONG                                  |          4  |  size of longword
  SVC_SZ_QUAD                                  |          8  |  size of quadword
  SVC_SZ_NATIVE                                |          2  |  size of native integer
#------------------------------------------------------------------------------------------------------------------------------
  SVC_REG_FLAGS_CARRY                          |     0x0001  |  FLAGS carry bit mask               (bit 0)
  SVC_REG_FLAGS_PARITY                         |     0x0002  |  FLAGS parity bit mask              (bit 1)
  SVC_REG_FLAGS_ZERO                           |     0x0004  |  FLAGS zero bit mask                (bit 2)
  SVC_REG_FLAGS_SIGN                           |     0x0008  |  FLAGS sign bit mask                (bit 3)
  SVC_REG_FLAGS_OVERFLOW                       |     0x0010  |  FLAGS arithmetic overflow bit mask (bit 4)
  SVC_REG_FLAGS_DIRECTION                      |     0x0020  |  FLAGS direction bit mask           (bit 5)
  SVC_REG_FLAGS_INTERRUPTS                     |     0x0040  |  FLAGS interrupts enabled bit mask  (bit 6)
#------------------------------------------------------------------------------------------------------------------------------
  SVC_REG_CR_INCDECCARRY                       |     0x0001  |  CR bitmask - INC and DEC are affecting carry flag
  SVC_REG_CR_FASTSTRING                        |     0x0002  |  CR bitmask - optimized string instructions (MOVS*, STOS*)
  SVC_REG_CR_UNHINTERROR                       |     0x0004  |  CR bitmask - call to unhandled interupt causes an error
  SVC_REG_CR_PORTERRORS                        |     0x0008  |  CR bitmask - accessing port wih no connected device causes an error
#------------------------------------------------------------------------------------------------------------------------------
  SVC_INT_IDX_MAXEXC                           |         31  |  Highest exception interrupt index
  SVC_INT_IDX_MINIRQ                           |         32  |  Lowest IRQ interrupt index
  SVC_INT_IDX_MAXIRQ                           |         95  |  Highest IRQ interrupr index
  SVC_INT_IDX_TRAP                             |        255  |  Trap interrupt index
#------------------------------------------------------------------------------------------------------------------------------
  SVC_INT_IDX_GENERALEXCEPTION                 |          0  |  General exception interrupt index (currently not used)
  SVC_INT_IDX_INVALIDINSTRUCTIONEXCEPTION      |          1  |  Invalid instruction exception interrupt index
  SVC_INT_IDX_DIVISIONBYZEROEXCEPTION          |          2  |  Division by zero exception interrupt index
  SVC_INT_IDX_ARITHMETICOVERFLOWEXCEPTION      |          3  |  Arithemetic overflow exception interrupt index
  SVC_INT_IDX_MEMORYALIGNMENTEXCEPTION         |          4  |  Memory alignment exception interrupt index (currently not used)
  SVC_INT_IDX_MEMORYACCESSEXCEPTION            |          5  |  Memory access exception interrupt index
  SVC_INT_IDX_NVMEMORYACCESSEXCEPTION          |          6  |  Non-volatile memory access exception interrupt index
  SVC_INT_IDX_DEVICENOTAVAILABLEEXCEPTION      |          7  |  Device not available exception interrupt index
  SVC_INT_IDX_INVALIDREGISTEREXCEPTION         |          8  |  Invalid register exception interrupt index
  SVC_INT_IDX_INVALIDADDRMODEEXCEPTION         |          9  |  Invalid addressing mode exception interrupt index
  SVC_INT_IDX_INVALIDARGUMENTEXCEPTION         |         10  |  Invalid argument exception interrupt index
  SVC_INT_IDX_STACKOVERFLOWEXCEPTION           |         11  |  Stack overflow exception interrupt index
  SVC_INT_IDX_STACKUNDERFLOWEXCEPTION          |         12  |  Stack underflow exception interrupt index
  SVC_INT_IDX_STACKREDZONEEXCEPTION            |         13  |  Stact red zone exception interrupt index
  SVC_INT_IDX_DOUBLEFAULTEXCEPTION             |         31  |  Double fault exception interrupt index
#-----------------------------------------------------------------------------------------------------------------------------
  SVC_EXCEPTION_GENERAL                        |          0  |  General exception (currently not used)
  SVC_EXCEPTION_INVALIDINSTRUCTION             |          1  |  Invalid instruction exception
  SVC_EXCEPTION_DIVISIONBYZERO                 |          2  |  Division by zero exception
  SVC_EXCEPTION_ARITHMETICOVERFLOW             |          3  |  Arithemetic overflow exception
  SVC_EXCEPTION_MEMORYALIGNMENT                |          4  |  Memory alignment exception (currently not used)
  SVC_EXCEPTION_MEMORYACCESS                   |          5  |  Memory access exception
  SVC_EXCEPTION_NVMEMORYACCESS                 |          6  |  Non-volatile memory access exception
  SVC_EXCEPTION_DEVICENOTAVAILABLE             |          7  |  Device not available exception
  SVC_EXCEPTION_INVALIDREGISTER                |          8  |  Invalid register exception
  SVC_EXCEPTION_INVALIDADDRMODE                |          9  |  Invalid addressing mode exception
  SVC_EXCEPTION_INVALIDARGUMENT                |         10  |  Invalid argument exception
  SVC_EXCEPTION_STACKOVERFLOW                  |         11  |  Stack overflow exception
  SVC_EXCEPTION_STACKUNDERFLOW                 |         12  |  Stack underflow exception
  SVC_EXCEPTION_STACKREDZONE                   |         13  |  Stact red zone exception
  SVC_EXCEPTION_DOUBLEFAULT                    |         31  |  Double fault exception
#-----------------------------------------------------------------------------------------------------------------------------
  SVC_INT_INTERRUPTSTACKSPACE                  |          8  |  Size of stack required for one interrupt call
#-----------------------------------------------------------------------------------------------------------------------------
  SVC_PCS_INFOPAGE_INVALID                     |     0x0000  |  Info page - invalid
#- CPU info - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  SVC_PCS_INFOPAGE_CPU_ARCHITECTURE            |     0x0001  |  Info page - architecture
  SVC_PCS_INFOPAGE_CPU_REVISION                |     0x0002  |  Info page - revision
#- memory info - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  SVC_PCS_INFOPAGE_MEM_SIZE                    |     0x1000  |  Info page - size of the memory
  SVC_PCS_INFOPAGE_MEM_BASE                    |     0x1001  |  Info page - real base address of the memory
#- NV memory info - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  SVC_PCS_INFOPAGE_MEM_NVSIZE                  |     0x2000  |  Info page - size of the non-volatile memory
  SVC_PCS_INFOPAGE_MEM_NVBASE                  |     0x2001  |  Info page - real base address of the non-volatile memory
#- counters, timers, clocks - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  SVC_PCS_INFOPAGE_CNTR_EXEC                   |     0x3000  |  Info page - execution counter
#-----------------------------------------------------------------------------------------------------------------------------
>